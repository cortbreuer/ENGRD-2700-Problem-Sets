system
system()
system(invisibl=FALSE)
build
current
packages()
library
library()
loaded
x<-rnorm(100)
y<-rnorm(100)
x-y
plot(1:100, x-y)
plot(x,y)
plot(x/y,y/x)
plot(x-y,y-x)
help("par")
qqplot(x,y)
x<-rpois(200, 10)
qqplot(x,y)
qqplot(y,x)
y<-rpois(200,5)
qqplot(x,y)
qqplot(y,x)
rexp(100)
x<-rexp(200)
plot(x,y)
qqplot(x,y)
plot(x,y)
y<-rt(200)
y<-rt(200, df=100)
plot(x,y)
y<-log(y)
plot(x,y)
stackloss
pairs
help("pairs")
pairs(stackloss)
plot(stackloss)
x<-1:1000
y<- x^2 - x
plot(x,y)
y<- x^2 - log(x)
plot(x,y)
y<- x^2 - x*log(x)
plot(x,y)
plot(2x,y)
plot(2*x,y)
x <- x/2
plot(x,y)
plot(-y,x)
y<-x*log(x)
plot(-y,x)
Orange
plot(circumference ~ age, data=Orange, pch=as.numeric(as.character(Tree)))
abline(lm(circumference  ̃ age, data = Orange, subset = Tree == "1"), lty = 1)
abline(lm(circumference  ̃ age, data = Orange, subset = Tree == "2"), lty = 2)
abline(lm(circumference  ̃ age, data = Orange, subset = Tree == "3"), lty = 3, lwd = 2)
abline(lm(circumference  ̃ age, data = Orange, subset = Tree == "4"), lty = 4)
abline(lm(circumference  ̃ age, data = Orange, subset = Tree == "5"), lty = 5)
legend("topleft", legend = paste("Tree", 1:5), lty = 1:5, pch = 1:5, lwd = c(1, 1, 2, 1, 1))
abline(lm(circumference~ age, data = Orange, subset = Tree == "1"), lty = 1)
abline(lm(circumference ~ age, data = Orange, subset = Tree == "2"), lty = 2)
abline(lm(circumference ~ age, data = Orange, subset = Tree == "3"), lty = 3, lwd = 2)
abline(lm(circumference ~ age, data = Orange, subset = Tree == "4"), lty = 4)
abline(lm(circumference ~ age, data = Orange, subset = Tree == "5"), lty = 5)
legend("topleft", legend = paste("Tree", 1:5), lty = 1:5, pch = 1:5, lwd = c(1, 1, 2, 1, 1))
par(mar = c(5, 5, 5, 5) + 0.1)
plot(c(1, 9), c(0, 50), type = ’n’, xlab = "", ylab = "")
par(mar = c(5, 5, 5, 5) + 0.1)
plot(c(1, 9), c(0, 50), type = 'n', xlab = "", ylab = "")
motor
motor
dataframes
data()
volcano
plot(volcano)
summary(volcano)
plot(volcano[1], volcano[2])
rivers
precipo
precip
pie(precip)
pie(precip, cex=.2)
pie(precip, cex=.2, legend=TRUE)
pie(precip, cex=.2, legend=TRUE)
faithful
plot(faithful)
plot(faithful, axes=FALSE) box()
plot(faithful, axes=FALSE)
box()
plot(faithful, axes=FALSE, xlab"", ylab"")
plot(faithful, axes=FALSE, xlab" ", ylab" ")
plot(faithful, axes=FALSE, xlab=" ", ylab=" ")
box()
plot(faithful)
plot(faithful, axes=FALSE, las=2)
plot(faithful, las=2)
plot(faithful, axes=FALSE, xlab="", ylab="")
box()
axis(side=2, las=2)
axis(size=1)
axis(size=1, las=1)
axis(side=1, las=1)
axis(side=1, las=2)
plot(faithful, axes=FALSE, xlab="", ylab="")
box()
axes(side=2, las=2)
axis(side=2, las=2)
axis(side=1, at=1:5)
clear
clear()
clr()
help
clear
clc
library(ggplot2)
region <- names(WorldPhones51)
region <- names(WorldPhones)
region
WorldPhonse
WorldPhones
summary(WorldPhones)
region <- names(WorldPhones)
region
library(lattice)
phones <- data.frame(Year = as.numeric(rep(rownames(WorldPhones), 7)),
Region = rep(colnames(WorldPhones), each = 7),
Telephones = as.numeric(WorldPhones)) xyplot(Telephones  ̃ Year | Region, data = phones)
library(lattice)
phones <- data.frame(Year = as.numeric(rep(rownames(WorldPhones), 7)),
Region = rep(colnames(WorldPhones), each = 7),
Telephones = as.numeric(WorldPhones)) xyplot(Telephones ~ Year | Region, data = phones)
var
variables
var()
variable()
n <- 100
result <- 1
for (i in 1:n)
result <- result * 1
result
result <- result * i
result
for (i in 1:n) result <- result * i
result
results <- numeric(1000) x <- 123
for (i in 1:1000) {
x <- (65539*x) %% (2ˆ31)
results[i] <- x / (2ˆ31)
}
results <- numeric(1000)
x<-123
for (i in 1:1000){}
for (i in 1:1000){x<-(65539*x)%%(2^31);results[i]<-x/(2^31)}
plot(1:1000,results)
re <- randu(1000)
library(rgl)
install.packages("rgl")
packages()
library(rgl)
library(rgl)
plot3d(results[1:998], results[2:999], results[3:1000])
help("cat")
system.time {2+3}
system.time (2+3)
x <- 1000
y <- 1000
system.time (z<-x+y)
x<-1000000
y<-1000000
x<-1:1000
y<-1:1000
system.time(z<-x+y)
x<-1:1000000
y<-1:1000000
system.time(z<-x+y)
x<-1:1000000000000
y<-1:1000000000000
system.time(z<-x+y)
x<-1:1000000000
y<-1:1000000000
system.time ({for (i in 1:1000000000) z[i]<-x[i]+y[i]})
system.time ({for (i in 1:1000000) z[i]<-x[i]+y[i]})
system.time ({for (i in 1:10000000) z[i]<-x[i]+y[i]})
system.time ({for (i in 1:100000000) z[i]<-x[i]+y[i]})
help(rprof)
help("Rprof")
x<-randu(100)
x<-rand(100)
help("rand")
help("??rand")
help(??rand)
x<-random(100)
rbinom
x<-rbinom(100)
x<-rbinom(100,1)
x<-rbinom(100,1,1)
x<-rbinom(100,1,.0001)
x<-rbinom(100,100,.0001)
x<-rbinom(100,100,.1)
y<-rbinom(100,100,.1)
plot(x,ky)
plot(x,y)
hist
hist(x)
hist(y)
mean(x)
mean(y)
x<-rbinom(10000,1000,.1)
y<-rbinom(10000,1000,.1)
plot(x,y)
y<-rbinom(10000,1000,1)
y<-rbinom(10000,1000,.9)
plot(x,y)
y<-pbinom(10000,1000,.9)
plot(x,y)
y<-bbinom(10000,1000,.9)
y<-rbinom(10000,1000,.9)
y<-rbinom(10000,10000,.9)
plot(x,y)
y<-rbinom(10000,10000,.05)
plot(x,y)
y<-rbinom(1000,1000,.2)
plot(x,y)
x<-rbinom(1000,1000,.2)
plot(x,y)
hist(x)
hist(y)
dia
diamonds
library(diamonds)
library(ggplot2)
diamonds
dia <- filter(diamonds, cut = "Premium")
dia <- filter(diamonds, cut == "Premium")
dia <- filter(diamonds, cut == "Very Good")
dia <- filter(diamonds, cut == 'Very Good')
dia <- filter(diamonds, carat > .3)
diamonds
dia <- diamonds %>% filter(cut == "Good")
library(tidyverse)
dia <- filter(diamonds, cut == 'Very Good')
dia
dia <- filter(diamonds, carat > .4)
dia
dia <- filter(diamonds, carat > .8)
dia
dia <- filter(diamonds, carat > 1.2)
dia
di <- filtere(dia, cut == "Premium")
di <- filter(dia, cut == "Premium")
di
pairs(di)
install.packages('IRkernel')
IRkernel::installspec()
knitr::opts_chunk$set(echo = TRUE)
recursivePump <- function(k, n) {
if ((k <= n) && (k >= 1)) {
return(0)
} else if (k == n) {
return(factorial(k))
} else if (n == 1) {
return(2^k-1)
}
else {
sum <- 0
for(j in 1:(k-n+1)) {
sum = sum + choose(k, j) * recursivePump(k-j, n-1)
j = j + 1
}
return(sum)
}
}
recursivePump(10,2)
recursivePump(2,10)
recursivePump <- function(k, n) {
if ((k <= n) && (k >= 1)) {
return(0)
} else if (k == n) {
return(factorial(k))
} else if (n == 1) {
return(2^k-1)
}
else {
sum <- 0
for(j in 1:(k-n+1)) {
sum = sum + choose(k, j) * recursivePump(k-j, n-1)
j = j + 1
}
return(s)
}
}
recursivePump(2,10)
recursivePump(10,2)
recursivePump <- function(k, n) {
if ((k <= n) && (k >= 1)) {
return(0)
} else if (k == n) {
return(factorial(k))
} else if (n == 1) {
return(2^k-1)
}
else {
sum <- 0
for(j in 1:(k-n+1)) {
sum = sum + choose(k, j) * recursivePump(k-j, n-1)
j = j + 1
}
return(sum)
}
}
assignments <- resursivePump(15, 8)
assignments <- recursivePump(15, 8)
assignments
#find assignments of k pumps to n tanks
recursivePump <- function(k, n) {
if ((k <= n) && (k >= 1)) {
return(0)
} else if (k == n) {
return(factorial(k))
} else if (n == 1) {
return(2^k-1)
}
else {
sum <- 0
for(j in 1:(k-n+1)) {
sum = sum + choose(k, j) * recursivePump(k-j, n-1)
j = j + 1
}
return(s)
}
}
assignments <- recursivePump(15, 8)
#find assignments of k pumps to n tanks
recursivePump <- function(k, n) {
if ((k <= n) && (k >= 1)) {
return(0)
} else if (k == n) {
return(factorial(k))
} else if (n == 1) {
return(2^k-1)
}
else {
sum <- 0
for(j in 1:(k-n+1)) {
sum = sum + choose(k, j) * recursivePump(k-j, n-1)
j = j + 1
}
return(sum)
}
}
assignments <- recursivePump(15, 8)
assignments <- recursivePump(15, 8)
processTime <- assignments / 1000000 / 60 / 60 / 24 / 365
processTime
---------
---------
---------
---------
---------
---------
---------
knitr::include_graphics("tripleVen.png")
knitr::include_graphics("/tripleVen.png")
include_graphics(tripleVen.png)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(png)
include_graphics(tripleVen.png)
include_graphics(tripleVen.png)
include_graphics(tripleVen.png)
include_graphics(tripleVen.png)
include_graphics(\tripleVen.png)
include_graphics(/tripleVen.png)
include_graphics("tripleVen.png")
include_graphics("tripleVen.png")
include_graphics("tripleVen.png")
dbinom(4, size=12, prob=0.2)
dbinom(61, size=1000, prob=.07)
dbinom(61, size=61, prob=.07)
dbinom(61, size=61, prob=.95)
dbinom(61, size=1000, prob=.95)
dbinom(61, size=1000, prob=.06)
dbinom(61, size=1000, prob=.05)
dbinom(60, size=1000, prob=.05)
dbinom(60, size=1000, prob=.07)
dbinom(61, size=1000, prob=.07)
dbinom(61, size=1000, prob=.93)
dbinom(61, size=61, prob=.93)
1 - dbinom(61, size=1000, prob=.93)
setwd("~/Desktop/Storage/Cornell/Sophomore Fall 2019/ENGRD 2700/ENGRD 2700 Work/Problem Sets/Problem Set 6")
data <- read_csv("DataForSunglasses.csv")
library(tidyverse)
data <- read_csv("DataForSunglasses.csv")
data
temp <- select(data, Temperature(Celsius))
temp <- select(data, 'Temperature(Celsius)')
temp
data <- tibble(data)
data
ggplot(data = data) + geom_point(mapping = aes(x = , y = 'Ice Cream Sales($)'))
ggplot(data = data) + geom_point(mapping = aes(x = 'Temperature(Celsius)', y = 'Ice Cream Sales($)'))
ggplot(data = data) + geom_point(mapping = aes(x = Temperature(Celsius), y = Ice Cream Sales($)))
ggplot(data = data) + geom_point(mapping = aes(x = `Temperature(Celsius)`, y = `Ice Cream Sales($)`))
temp <- data$"Temperature(Celsius)"
> temp <- select(data, 'Temperature(Celsius)')
temp
temp <- select(data, 'Temperature(Celsius)')
data <- read_csv("DataForSunglasses.csv")
data
temp <- select(data, 'Temperature(Celsius)')
sunglasses <- select(data, 'Sunglass Sales($)')
icecream <- select(data, 'Ice Cream Sales($)')
data <- tibble(temp, sunglasses, icecream)
ggplot(data = data) + geom_point(mapping = aes(x = temp, y = icecream))
temp
icecream
sunglasses
data
Data <- tibble(temp, sunglasses, icecream)
data
Data
ggplot(data = Data) + geom_point(mapping = aes(x = temp, y = icecream))
data <- read_csv("DataForSunglasses.csv")
temp <- Temperature.Celsius
temp <- Temperature.Celsius...
temp <- data$"Temperature(Celsius)"
temp
ggplot(data = data) + geom_point(aes(x = data$`Temperature(Celsius)`, y = data$`Ice Cream Sales($)`))
ggplot(data = data) + geom_point(aes(x = data$`Temperature(Celsius)`, y = data$`Ice Cream Sales($)`)) + xlab("Temperature (Celsius)") + ylab("Ice Cream Sales ($)") + ggtitle("Ice Cream vs. Temperature Plot")
ggplot(data = data) + geom_point(aes(x = data$`Ice Cream Sales($)`, y = data$`Sunglass Sales($)`)) + xlab("Ice Cream Sales ($)") + ylab("Sunglasses Sales ($)") + ggtitle("Sunglasses vs. Ice Cream Plot")
ggplot(data = data) + geom_point(aes(x = data$`Temperature(Celsius)`, y = data$`Sunglass Sales($)`)) + xlab("Temperature (Celsius") + ylab("Sunglasses Sales ($)") + ggtitle("Sunglasses vs. Temperature Plot")
cor(data$`Temperature(Celsius)`, data$`Ice Cream Sales($)`)
cor(data$`Ice Cream Sales($)`, data$`Sunglass Sales($)`)
cor(data$`Temperature(Celsius)`, data$`Sunglass Sales($)`)
ggplot(data = data) + geom_point(aes(x = data$`Ice Cream Sales($)`, y = data$`Sunglass Sales($)`)) + xlab("Ice Cream Sales ($)") + ylab("Sunglasses Sales ($)") + ggtitle("Sunglasses vs. Ice Cream Plot")
ggplot(data = data) + geom_point(aes(x = data$`Temperature(Celsius)`, y = data$`Ice Cream Sales($)`)) + xlab("Temperature (Celsius)") + ylab("Ice Cream Sales ($)") + ggtitle("Ice Cream vs. Temperature Plot")
ggplot(data = data) + geom_point(aes(x = data$`Ice Cream Sales($)`, y = data$`Sunglass Sales($)`)) + xlab("Ice Cream Sales ($)") + ylab("Sunglasses Sales ($)") + ggtitle("Sunglasses vs. Ice Cream Plot")
ggplot(data = data) + geom_point(aes(x = data$`Temperature(Celsius)`, y = data$`Sunglass Sales($)`)) + xlab("Temperature (Celsius") + ylab("Sunglasses Sales ($)") + ggtitle("Sunglasses vs. Temperature Plot")
pbinom(46, 100, .5)
